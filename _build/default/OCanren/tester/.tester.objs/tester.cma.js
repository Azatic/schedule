// Generated by js_of_ocaml
//# buildInfo:effects=false, use-js-string=false, version=5.0.1
(function
   (globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    var
     global_data=runtime.caml_get_global_data(),
     cst$1=caml_string_of_jsbytes(" "),
     cst$0=caml_string_of_jsbytes(""),
     cst_s$1=caml_string_of_jsbytes("s"),
     cst=caml_string_of_jsbytes(""),
     cst_all=caml_string_of_jsbytes("all"),
     cst_t=caml_string_of_jsbytes("t"),
     cst_s$0=caml_string_of_jsbytes("s"),
     cst_r$1=caml_string_of_jsbytes("r"),
     cst_q$2=caml_string_of_jsbytes("q"),
     cst_s=caml_string_of_jsbytes("s"),
     cst_r$0=caml_string_of_jsbytes("r"),
     cst_q$1=caml_string_of_jsbytes("q"),
     cst_r=caml_string_of_jsbytes("r"),
     cst_q$0=caml_string_of_jsbytes("q"),
     cst_q=caml_string_of_jsbytes("q"),
     cst_Tester_NoMoreAnswers=caml_string_of_jsbytes("Tester.NoMoreAnswers"),
     Stdlib_Printf=global_data.Stdlib__Printf,
     OCanren_Stream=global_data.OCanren__Stream,
     Assert_failure=global_data.Assert_failure,
     OCanren=global_data.OCanren,
     Stdlib=global_data.Stdlib,
     Stdlib_List=global_data.Stdlib__List,
     _f_=
      [0,
       [2,0,[2,0,[12,61,[2,0,[12,59,[10,0]]]]]],
       caml_string_of_jsbytes("%s%s=%s;%!")],
     _b_=[0,1],
     _c_=[0,caml_string_of_jsbytes("OCanren/tester/tester.ml"),42,11],
     _d_=[0,[12,10,[10,0]],caml_string_of_jsbytes("\n%!")],
     _e_=
      [0,
       [11,caml_string_of_jsbytes("}\n"),[10,0]],
       caml_string_of_jsbytes("}\n%!")],
     _a_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(", "),
         [2,
          0,
          [11,
           caml_string_of_jsbytes(" answer"),
           [2,0,[11,caml_string_of_jsbytes(" {\n"),[10,0]]]]]]],
       caml_string_of_jsbytes("%s, %s answer%s {\n%!")];
    function wrap(onOK,i,param)
     {var x=param[2],name=param[1];return caml_call3(onOK,i,name,x)}
    function qh(onOK,q,param)
     {var _E_=[0,[0,cst_q,q],0];
      function _F_(_G_,_H_){return wrap(onOK,_G_,_H_)}
      return caml_call1(caml_call1(Stdlib_List[18],_F_),_E_)}
    function qrh(onOK,q,r,param)
     {var _A_=[0,[0,cst_q$0,q],[0,[0,cst_r,r],0]];
      function _B_(_C_,_D_){return wrap(onOK,_C_,_D_)}
      return caml_call1(caml_call1(Stdlib_List[18],_B_),_A_)}
    function qrsh(onOK,q,r,s,param)
     {var _w_=[0,[0,cst_q$1,q],[0,[0,cst_r$0,r],[0,[0,cst_s,s],0]]];
      function _x_(_y_,_z_){return wrap(onOK,_y_,_z_)}
      return caml_call1(caml_call1(Stdlib_List[18],_x_),_w_)}
    function qrsth(onOK,q,r,s,t,param)
     {var
       _s_=
        [0,
         [0,cst_q$2,q],
         [0,[0,cst_r$1,r],[0,[0,cst_s$0,s],[0,[0,cst_t,t],0]]]];
      function _t_(_u_,_v_){return wrap(onOK,_u_,_v_)}
      return caml_call1(caml_call1(Stdlib_List[18],_t_),_s_)}
    function make_title(n,msg)
     {var
       _q_=1 === n?cst:cst_s$1,
       _r_=-1 === n?cst_all:caml_call1(Stdlib[33],n);
      return caml_call4(Stdlib_Printf[2],_a_,msg,_r_,_q_)}
    var
     NoMoreAnswers=
      [248,cst_Tester_NoMoreAnswers,runtime.caml_fresh_oo_id(0)];
    function run_gen(onFree,n,num,handler,param)
     {var goal=param[2],repr=param[1];
      make_title(n,repr);
      function loop(st,k)
       {var st$0=st,k$0=k;
        for(;;)
         {if(n < k$0 && 0 <= n)return 0;
          var _o_=caml_call2(OCanren_Stream[16],_b_,st$0),_p_=_o_[1];
          if(! _p_)throw NoMoreAnswers;
          if(_p_[2])throw [0,Assert_failure,_c_];
          var tl=_o_[2],f=_p_[1];
          caml_call1(f,0);
          caml_call1(Stdlib_Printf[2],_d_);
          var k$1=k$0 + 1 | 0,st$0=tl,k$0=k$1}}
      var handler$0=caml_call1(handler,onFree);
      try
       {loop(caml_call3(OCanren[49],num,goal,handler$0),1)}
      catch(_n_)
       {_n_ = caml_wrap_exception(_n_);if(_n_ !== NoMoreAnswers)throw _n_}
      return caml_call1(Stdlib_Printf[2],_e_)}
    function run_r(reifier,printerR)
     {function _g_(i,name,func)
       {var
         ans=
          caml_call2
           (runtime.caml_get_public_method(func,-423578583,1),func,reifier),
         _l_=caml_call1(printerR,ans),
         _m_=0 === i?cst$0:cst$1;
        return caml_call4(Stdlib_Printf[2],_f_,_m_,name,_l_)}
      return function(_h_,_i_,_j_,_k_){return run_gen(_g_,_h_,_i_,_j_,_k_)}}
    var Tester=[0,run_r,run_gen,qh,qrh,qrsh,qrsth];
    runtime.caml_register_global(28,Tester,"Tester");
    return}
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiIudGVzdGVyLm9ianMvdGVzdGVyLmNtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6WyJ3cmFwIiwib25PSyIsImkiLCJ4IiwibmFtZSIsInFoIiwicSIsInFyaCIsInIiLCJxcnNoIiwicyIsInFyc3RoIiwidCIsIm1ha2VfdGl0bGUiLCJuIiwibXNnIiwicnVuX2dlbiIsIm9uRnJlZSIsIm51bSIsImhhbmRsZXIiLCJnb2FsIiwicmVwciIsImxvb3AiLCJzdCIsImsiLCJzdCQwIiwiayQwIiwidGwiLCJmIiwiayQxIiwiaGFuZGxlciQwIiwicnVuX3IiLCJyZWlmaWVyIiwicHJpbnRlclIiLCJmdW5jIiwiYW5zIl0sInNvdXJjZXMiOlsiL1VzZXJzL2F6YXQvRGVza3RvcC9teV9zY2hlZF9wcm9qL19idWlsZC9kZWZhdWx0L09DYW5yZW4vdGVzdGVyL3Rlc3Rlci5tbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7STs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzthQU9JQSxLQUFLQyxLQUFLQztVQUFTQyxXQUFOQyxnQ0FBUkgsS0FBS0MsRUFBR0UsS0FBTUQ7YUFHbkJFLEdBQUdKLEtBQVdLO01BQ2hCLG9CQURnQkE7TUFDTCxzQixPQUpUTixLQUdHQztNQUNMLHNEQUFrQzthQUVoQ00sSUFBSU4sS0FBV0ssRUFBRUU7TUFDbkIsc0JBRGlCRixlQUFFRTtNQUNSLHNCLE9BUFRSLEtBTUlDO01BQ04sc0RBQTBDO2FBRXhDUSxLQUFLUixLQUFXSyxFQUFFRSxFQUFFRTtNQUN0QixzQkFEa0JKLGlCQUFFRSxlQUFFRTtNQUNYLHNCLE9BVlRWLEtBU0tDO01BQ1Asc0RBQWtEO2FBRWhEVSxNQUFNVixLQUFXSyxFQUFFRSxFQUFFRSxFQUFFRTtNQUN6Qjs7O29CQURtQk47dUJBQUVFLGlCQUFFRSxlQUFFRTtNQUNkLHNCLE9BYlRaLEtBWU1DO01BQ1Isc0RBQTBEO2FBRXhEWSxXQUFXQyxFQUFFQztNQUNmO2lCQURhRDs0QkFHa0Isc0JBSGxCQTtNQUdpQyx1Q0FIL0JDLFlBSWlCOzs7O2FBSTlCQyxRQUFRQyxPQUFPSCxFQUFFSSxJQUFJQztVQUFlQyxjQUFOQztNQUNoQyxXQURpQlAsRUFBZU87TUFDaEMsU0FDUUMsS0FBS0MsR0FDWEM7WUFEV0MsUUFDWEM7UUFBTzthQUhRWixJQUdmWSxZQUhlWixFQUdlO1VBRXhCLDBDQUhLVyxNQUdMO21CQUNJO29CQUtIO1VBTkQsSUFFQUUsVUFBSEM7VUFDRCxXQURDQTtVQUVEO1VBSkksSUFJSixJQU5GRixZQURXRCxLQUtMRSxHQUpORCxRQUEwQjtNQVVkLElBQVZJLFVBQVUsV0FiU1gsUUFBYkY7O1FBY0csS0FBSyx1QkFkQ0MsSUFBbUJFLEtBYWxDVTs7O01BRUo7YUFFRUMsTUFBTUMsUUFBUUM7TUFBVyxhQUN0Qi9CLEVBQUVFLEtBQU04QjtRQUNEOzs7WUFBViwrQkFEV0Esd0JBRExGO1NBRzhDLGVBSHRDQyxTQUVWRTtTQUNnRCxVQUZqRGpDO21EQUFFRSxTQUU2RDtNQUh6QyxpQyxPQWpCekJZLDZCQXFCQztrQkFKRGUsTUFqQkFmLFFBcEJBWCxHQUdBRSxJQUdBRSxLQUdBRTs7VSIsInNvdXJjZXNDb250ZW50IjpbIigqKiB7MSBVc2VmdWwgZnVuY3Rpb25zIHRvIHRlc3QgcnVubmluZyByZWxhdGlvbmFsIHF1ZXJpZXMgfSAqKVxuXG5vcGVuIFByaW50Zlxub3BlbiBPQ2FucmVuXG5cbigqKiB7MyBIZWxwZXIgZnVuY3Rpb25zIHRvIHByb3ZpZGUgbmFtZXMgZm9yIHRvcC1sZXZlbCB2YXJpYWJsZXMgfSAqKVxuXG5sZXQgd3JhcCBvbk9LIGkgKG5hbWUsIHgpID1cbiAgb25PSyBpIG5hbWUgeFxuXG5sZXQgcWggb25PSyA9IGZ1biBxICgpIC0+XG4gIExpc3QuaXRlcmkgKHdyYXAgb25PSykgQEAgW1wicVwiLCBxXVxuXG5sZXQgcXJoIG9uT0sgPSBmdW4gcSByICgpIC0+XG4gIExpc3QuaXRlcmkgKHdyYXAgb25PSykgQEAgW1wicVwiLCBxOyBcInJcIiwgcl1cblxubGV0IHFyc2ggb25PSyA9IGZ1biBxIHIgcyAoKSAtPlxuICBMaXN0Lml0ZXJpICh3cmFwIG9uT0spIEBAIFtcInFcIiwgcTsgXCJyXCIsIHI7IFwic1wiLCBzXVxuXG5sZXQgcXJzdGggb25PSyA9IGZ1biBxIHIgcyB0ICgpIC0+XG4gIExpc3QuaXRlcmkgKHdyYXAgb25PSykgQEAgW1wicVwiLCBxOyBcInJcIiwgcjsgXCJzXCIsIHM7IFwidFwiLCB0XVxuXG5sZXQgbWFrZV90aXRsZSBuIG1zZyA9XG4gIHByaW50ZiBcIiVzLCAlcyBhbnN3ZXIlcyB7XFxuJSFcIlxuICAgIG1zZ1xuICAgIChpZiBuID0gKC0xKSB0aGVuIFwiYWxsXCIgZWxzZSBzdHJpbmdfb2ZfaW50IG4pXG4gICAgKGlmIG4gPD4gIDEgIHRoZW4gXCJzXCIgZWxzZSBcIlwiKVxuXG5leGNlcHRpb24gTm9Nb3JlQW5zd2Vyc1xuXG5sZXQgcnVuX2dlbiBvbkZyZWUgbiBudW0gaGFuZGxlciAocmVwciwgZ29hbCkgPVxuICBtYWtlX3RpdGxlIG4gcmVwcjtcbiAgbGV0IHJlYyBsb29wIHN0ID0gZnVuY3Rpb25cbiAgfCBrIHdoZW4gKGsgPiBuKSAmJiAobiA+PSAwKSAtPiAoKVxuICB8IGsgLT5cbiAgICBtYXRjaCBTdHJlYW0ucmV0cmlldmUgfm46MSBzdCB3aXRoXG4gICAgfCBbXSxfIC0+IHJhaXNlIE5vTW9yZUFuc3dlcnNcbiAgICB8IFtmXSx0bCAtPlxuICAgICAgZiAoKTtcbiAgICAgIHByaW50ZiBcIlxcbiUhXCI7XG4gICAgICBsb29wIHRsIChrKzEpXG4gICAgfCBfIC0+IGFzc2VydCBmYWxzZVxuICBpblxuICBsZXQgaGFuZGxlciA9IGhhbmRsZXIgb25GcmVlIGluXG4gIGxldCAoKSA9IHRyeSBsb29wIChydW4gbnVtIGdvYWwgaGFuZGxlcikgMSB3aXRoIE5vTW9yZUFuc3dlcnMgLT4gKCkgaW5cbiAgcHJpbnRmIFwifVxcbiUhXCJcblxubGV0IHJ1bl9yIHJlaWZpZXIgcHJpbnRlclIgPSBydW5fZ2VuXG4gIChmdW4gaSBuYW1lIChmdW5jIDogXyBPQ2FucmVuLnJlaWZpZWQpIC0+XG4gICAgbGV0IGFucyA9IGZ1bmMjcmVpZnkgcmVpZmllciBpblxuICAgIHByaW50ZiBcIiVzJXM9JXM7JSFcIiAoaWYgaTw+MCB0aGVuIFwiIFwiIGVsc2UgXCJcIikgbmFtZSAocHJpbnRlclIgYW5zKVxuICAgIClcbiJdfQ==
