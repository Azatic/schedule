// Generated by js_of_ocaml
//# buildInfo:effects=false, use-js-string=false, version=5.0.1
(function
   (globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_js_from_array=runtime.caml_js_from_array,
     caml_js_to_array=runtime.caml_js_to_array,
     caml_js_wrap_meth_callback=runtime.caml_js_wrap_meth_callback,
     caml_jsstring_of_string=runtime.caml_jsstring_of_string,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_string_of_jsstring=runtime.caml_string_of_jsstring;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    var
     global_data=runtime.caml_get_global_data(),
     cst=caml_string_of_jsbytes(""),
     cst_should_not_happend_DONT_DO=
      caml_string_of_jsbytes("should not happend. (DONT DO THIS)"),
     cst_myMathLib=caml_string_of_jsbytes("myMathLib"),
     Stdlib_Array=global_data.Stdlib__Array;
    global_data.CamlinternalOO;
    var
     Js_of_ocaml_Js=global_data.Js_of_ocaml__Js,
     Stdlib=global_data.Stdlib,
     OCanren_List=global_data.OCanren__List,
     OCanren=global_data.OCanren,
     Type_core=global_data.Type_core,
     Sched_core=global_data.Sched_core,
     OCanren_Stream=global_data.OCanren__Stream,
     Stdlib_List=global_data.Stdlib__List,
     _a_=[0,1];
    function schedo(constraints,schedule,lecture_plan,number)
     {function _t_(rr)
       {return caml_call2
                (runtime.caml_get_public_method(rr,-423578583,1),
                 rr,
                 Type_core[3])}
      function _u_(x)
       {return caml_call5
                (Sched_core[13],constraints,schedule,lecture_plan,number,x)}
      var
       _v_=caml_call3(OCanren[49],OCanren[56],_u_,_t_),
       _w_=caml_call1(caml_call1(OCanren_Stream[17],_a_),_v_);
      function _x_(storage)
       {var _z_=caml_call1(Type_core[5],storage);
        caml_call1(Stdlib[46],_z_);
        function _A_(param)
         {if(0 === param[0])
           return caml_call1(Stdlib[2],cst_should_not_happend_DONT_DO);
          var match=param[1],b=match[2],a=match[1];
          function _H_(x){if(0 === x[0])return cst;var x$0=x[1];return x$0}
          var
           _I_=caml_call1(OCanren_List[99],_H_),
           _J_=caml_call2(OCanren_List[99],_I_,b);
          return [0,caml_call1(OCanren[21],a),_J_]}
        var
         storage$0=caml_call1(caml_call1(OCanren_List[99],_A_),storage),
         _B_=caml_call1(Stdlib_Array[12],storage$0);
        function _C_(param)
         {var
           b=param[2],
           a=param[1],
           _D_=caml_call1(Stdlib_Array[12],b),
           _E_=
            caml_js_from_array
             (caml_call1(caml_call1(Stdlib_Array[15],Stdlib_Array[12]),_D_)),
           _F_=
            caml_call1(caml_call1(Js_of_ocaml_Js[22],caml_js_from_array),_E_),
           _G_=caml_call1(Js_of_ocaml_Js[22],caml_jsstring_of_string),
           t1=caml_call1(caml_call1(Js_of_ocaml_Js[22],_G_),_F_),
           t0=caml_jsstring_of_string(a);
          return {"x":t0,"schedule":t1}}
        return caml_js_from_array
                (caml_call1(caml_call1(Stdlib_Array[15],_C_),_B_))}
      var _y_=caml_call1(caml_call1(Stdlib_List[19],_x_),_w_);
      return caml_js_from_array(caml_call1(Stdlib_Array[12],_y_))}
    function t9(param,_s_){return caml_js_from_array([0,1,2,3])}
    function t7(param,constraints,schedule,lecture_plan,number)
     {var
       _b_=caml_js_to_array(lecture_plan),
       _c_=caml_call1(caml_call1(Stdlib_Array[15],caml_js_to_array),_b_),
       _d_=caml_call1(Stdlib_Array[15],caml_string_of_jsstring),
       _e_=caml_call1(caml_call1(Stdlib_Array[15],_d_),_c_),
       _f_=caml_call2(Stdlib_Array[15],Stdlib_Array[11],_e_),
       _g_=caml_call1(Stdlib_Array[11],_f_),
       _h_=caml_js_to_array(schedule),
       _i_=caml_call1(caml_call1(Stdlib_Array[15],caml_js_to_array),_h_),
       _j_=caml_call1(Stdlib_Array[15],caml_string_of_jsstring),
       _k_=caml_call1(caml_call1(Stdlib_Array[15],_j_),_i_),
       _l_=caml_call2(Stdlib_Array[15],Stdlib_Array[11],_k_),
       _m_=caml_call1(Stdlib_Array[11],_l_),
       _n_=caml_js_to_array(constraints),
       _o_=caml_call1(caml_call1(Stdlib_Array[15],caml_js_to_array),_n_),
       _p_=caml_call1(Stdlib_Array[15],caml_string_of_jsstring),
       _q_=caml_call1(caml_call1(Stdlib_Array[15],_p_),_o_),
       _r_=caml_call2(Stdlib_Array[15],Stdlib_Array[11],_q_);
      return schedo(caml_call1(Stdlib_Array[11],_r_),_m_,_g_,number)}
    caml_call2
     (Js_of_ocaml_Js[50],
      cst_myMathLib,
      {"generateSched":caml_js_wrap_meth_callback(t7),
       "zero":0.,
       "shit":caml_js_wrap_meth_callback(t9)});
    var Dune_exe_Main=[0,schedo];
    runtime.caml_register_global(26,Dune_exe_Main,"Dune__exe__Main");
    return}
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiIubWFpbi5lb2Jqcy9ieXRlL2R1bmVfX2V4ZV9fTWFpbi5jbW8uanMiLCJzb3VyY2VSb290IjoiIiwibmFtZXMiOlsic2NoZWRvIiwiY29uc3RyYWludHMiLCJzY2hlZHVsZSIsImxlY3R1cmVfcGxhbiIsIm51bWJlciIsInJyIiwieCIsInN0b3JhZ2UiLCJiIiwiYSIsIngkMCIsInN0b3JhZ2UkMCJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9hemF0L0Rlc2t0b3AvbXlfc2NoZWRfcHJvai9fYnVpbGQvZGVmYXVsdC9kZW1vMXBweC9tYWluLm1sIl0sIm1hcHBpbmdzIjoiOzs7OztJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7YUFlSUEsT0FBT0MsWUFBYUMsU0FBU0MsYUFBYUM7TUFDNUMsYUFJT0M7UUFBTTtnREFBTkE7OzhCQUFjO01BSnJCLGFBR09DO1FBQUs7Z0NBSkhMLFlBQWFDLFNBQVNDLGFBQWFDLE9BSXJDRSxFQUFVO01BRmpCOztPQUlzQixlQUFuQjtNQUFtQixhQUNFQztRQUNKLGdDQURJQTtRQUNuQjs7VUFHMEM7V0FXeEI7NkJBVlNDLFdBQUhDO3VCQUtGSCxHQUNGLFNBREVBLEtBR1MsV0FERSxJQUFMSSxJQUZOSixLQUVXLE9BQUxJLEdBQ0s7VUFMbkI7O1dBREgsb0NBRmdCRjtVQUNoQixpQ0FEYUMsT0FVd0M7UUFYdkI7OEJBQXBDLGlDQUpjRjtTQWtCbkIsZ0NBaEJJSTtRQWdCSjtVQVNtQjtXQVJHSDtXQUFIQztXQVFBLGdDQVJHRDtXQVFlOztjQUFVLFdBQVQ7V0FDZDt1QkFBWjtXQUNjO1dBQUYsY0FBWjtXQVJHLDJCQUZJQzs7UUFBakI7aUJBQVUsV0FBVCxzQ0FZUTtNQS9CRSxtQkFBZjtNQWdDRCwwQkFBRixpQ0FDVzsyQkEwTW9CLG9DQUFEO3NCQTdCdkJSLFlBQ0NDLFNBQ0RDLGFBQ0FDO01Bb0JROzRCQXJCUkQ7T0FzQm9CLGVBQVQ7T0FDVztPQUFGLGVBQVQ7T0FMTDtPQURIO09BSEsscUJBZlBEO09BZ0JtQixlQUFUO09BQ1c7T0FBRixlQUFUO09BTEw7T0FESDtPQUhLLHFCQVRSRDtPQVVvQixlQUFUO09BQ1c7T0FBRixlQUFUO09BTEw7TUFESCxPQTFOUkQsT0EwTlEseUNBRkhJLE9BQ007SUFSYjs7Ozs7O3lCQWpORUo7SUFpTkY7VSIsInNvdXJjZXNDb250ZW50IjpbIm9wZW4gU2NoZWRfY29yZVxuXG4oKiBvcGVuIFlvanNvbi5CYXNpYyAqKVxub3BlbiBKc19vZl9vY2FtbFxub3BlbiBUeXBlX2NvcmVcblxudHlwZSBrZXlfZGVzYyA9IHN0cmluZ1xuXG5vcGVuIE9DYW5yZW5cblxuKCogbGV0IG15ZnJvbV9sb2dpYyA9IGZ1bmN0aW9uXG4gIHwgVmFsdWUgeCAtPiB4XG4gIHwgVmFyIChuLCBfKSAtPiBOb25lXG47OyAqKVxuXG5sZXQgc2NoZWRvIF9jb25zdHJhaW50cyBzY2hlZHVsZSBsZWN0dXJlX3BsYW4gbnVtYmVyID1cbiAgbGV0IG9wZW4gT0NhbnJlbiBpblxuICBPQ2FucmVuLnJ1blxuICAgIE9DYW5yZW4ucVxuICAgIChmdW4geCAtPiB0ZXN0MSBfY29uc3RyYWludHMgc2NoZWR1bGUgbGVjdHVyZV9wbGFuIG51bWJlciB4KVxuICAgIChmdW4gcnIgLT4gcnIjcmVpZnkgc3RvcmFnZV9yZWlmaWVyKVxuICB8PiBPQ2FucmVuLlN0cmVhbS50YWtlIH5uOjFcbiAgfD4gU3RkbGliLkxpc3QubWFwIChmdW4gc3RvcmFnZSAtPlxuICAgICAgIHByaW50X2VuZGxpbmUgKHNob3dfc3RvcmFnZSBzdG9yYWdlKTtcbiAgICAgICBsZXQgc3RvcmFnZSA6IChrZXlfZGVzYyAqIHN0cmluZyBsaXN0IGxpc3QpIGxpc3QgPVxuICAgICAgICAgc3RvcmFnZVxuICAgICAgICAgfD4gT0NhbnJlbi5TdGQuTGlzdC5sb2dpY190b19ncm91bmRfZXhuIChmdW5jdGlvblxuICAgICAgICAgICAgICB8IE9DYW5yZW4uVmFsdWUgKGEsIGIpIC0+XG4gICAgICAgICAgICAgICAgKCBPQ2FucmVuLmZyb21fbG9naWMgYVxuICAgICAgICAgICAgICAgICwgT0NhbnJlbi5TdGQuTGlzdC5sb2dpY190b19ncm91bmRfZXhuXG4gICAgICAgICAgICAgICAgICAgIChPQ2FucmVuLlN0ZC5MaXN0LmxvZ2ljX3RvX2dyb3VuZF9leG5cbiAgICAgICAgICAgICAgICAgICAgICAgRnVuLihcbiAgICAgICAgICAgICAgICAgICAgICAgICBmdW4geCAtPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2ggeCB3aXRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB8IFZhbHVlIHggLT4geFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBWYXIgXyAtPiBcIlwiKSlcbiAgICAgICAgICAgICAgICAgICAgYiApXG4gICAgICAgICAgICAgIHwgVmFyIF8gLT4gZmFpbHdpdGggXCJzaG91bGQgbm90IGhhcHBlbmQuIChET05UIERPIFRISVMpXCIpXG4gICAgICAgaW5cbiAgICAgICBzdG9yYWdlXG4gICAgICAgfD4gQXJyYXkub2ZfbGlzdFxuICAgICAgIHw+IEFycmF5Lm1hcCAoZnVuIChhLCBiKSAtPlxuICAgICAgICAgICAgb2JqZWN0JWpzXG4gICAgICAgICAgICAgIHZhbCB4ID0gSnMuc3RyaW5nIGFcblxuICAgICAgICAgICAgICAoKiB2YWwgc2NoZWR1bGUgPVxuICAgICAgICAgICAgICAgICAgIEpzLmFycmF5IChBcnJheS5vZl9saXN0IFsgXCJhZHNmXCI7IFwic2RmXCIgXSkgfD4gSnMuYXJyYXlfbWFwIEpzLnN0cmluZyAqKVxuXG4gICAgICAgICAgICAgIHZhbCBzY2hlZHVsZSA9XG4gICAgICAgICAgICAgICAgSnMuYXJyYXkgKEFycmF5Lm9mX2xpc3QgYiB8PiBBcnJheS5tYXAgQXJyYXkub2ZfbGlzdClcbiAgICAgICAgICAgICAgICB8PiBKcy5hcnJheV9tYXAgSnMuYXJyYXlcbiAgICAgICAgICAgICAgICB8PiBKcy5hcnJheV9tYXAgKEpzLmFycmF5X21hcCBKcy5zdHJpbmcpXG4gICAgICAgICAgICBlbmQpXG4gICAgICAgfD4gSnMuYXJyYXkpXG4gIHw+IEFycmF5Lm9mX2xpc3RcbiAgfD4gSnMuYXJyYXlcbjs7XG5cbigqINC80L3QtSDQvdGD0LbQvdC+INCyIDMzIDM0INGB0YLRgNC+0LrQsNGFINCy0YvQstC10YHRgtC4INGH0YLQvi3RgtC+INGB0L7QtNC10YDQtNC20LDRgtC10LvRjNC90L7QtSwg0YIg0LUg0YHQsNC80L4g0YDQsNGB0L/QuNGB0LDQvdC40LUgKilcbigqINC90LAg0LTQsNC90L3Ri9C5INC80L7QvNC10L3RgiDQvNGLINC/0LXRgNC10LTQsNC70Lgg0L3QtdC60L7RgtC+0YDRi9C1INC+0LPRgNCw0L3QuNGH0LXQvdC40Y8sINC90L4g0L/QvtC60LAg0L3QuNC60LDQuiDQuNGFINC90LUg0LjRgdC/0L7Qu9GM0LfRg9C10LwgKilcbm9wZW4gSnNfb2Zfb2NhbWxcbigqIG9wZW4gVHlwZV9jb3JlICopXG5cbigqIG9wZW4gWW9qc29uLkJhc2ljXG5cbigqIENvbnZlcnQgdGhlIGRhdGEgdG8gSlNPTiAqKVxubGV0IGNvbnZlcnRfdG9fanNvbiBkYXRhID1cbmxldCByZWMgY29udmVydF9saXN0IGxzdCA9XG5gTGlzdCAoTGlzdC5tYXAgY29udmVydF9pdGVtIGxzdClcblxuYW5kIGNvbnZlcnRfaXRlbSBpdGVtID1cbm1hdGNoIGl0ZW0gd2l0aFxufCAoa2V5LCB2YWx1ZXMpIC0+IGBBc3NvYyBbKGtleSwgY29udmVydF9saXN0IHZhbHVlcyldXG58IF8gLT4gYE51bGxcblxuaW5cbm1hdGNoIGRhdGEgd2l0aFxufCAobnVtLCBwYWlycykgLT4gYEFzc29jIFsoc3RyaW5nX29mX2ludCBudW0sIGNvbnZlcnRfbGlzdCBwYWlycyldXG5cbigqIERhdGEgdG8gY29udmVydCAqKVxubGV0IGRhdGEgPSAoMCwgW1xuKFwiYi0xMVwiLCBbW1wiZ2VvbTFcIjsgXCJnZW9tMlwiOyAwLjQ3NTsgMC40NzZdOyBbMC4zMzg7IDAuMzM5OyAwLjM0MDsgMC4zNDFdOyBbMC4zNDY7IDAuMzQ3OyAwLjM0ODsgMC4zNDldOyBbMC4zNTA7IDAuMzUxOyAwLjM1MjsgMC4zNTNdOyBbMC4zNjI7IDAuMzYzOyAwLjM2NDsgMC4zNjVdXSk7XG4oXCJ2aWRlbjFcIiwgW1tcImdlb20xXCI7IFwiZ2VvbTJcIjsgMC40Nzg7IDAuNDc5XTsgWzAuMjcyOyAwLjI3MzsgMC4yNzQ7IDAuMjc1XTsgWzAuMjg4OyAwLjI4OTsgMC4yOTA7IDAuMjkxXTsgWzAuMjkyOyAwLjI5MzsgMC4yOTQ7IDAuMjk1XTsgWzAuMzAwOyAwLjMwMTsgMC4zMDI7IDAuMzAzXV0pXG5dKVxuXG4oKiBDb252ZXJ0IGRhdGEgdG8gSlNPTiAqKVxubGV0IGpzb24gPSBjb252ZXJ0X3RvX2pzb24gZGF0YVxuXG4oKiBDb252ZXJ0IEpTT04gdG8gc3RyaW5nICopXG5sZXQganNvbl9zdHJpbmcgPSB0b19zdHJpbmcganNvblxuXG4oKiBQcmludCB0aGUgSlNPTiBzdHJpbmcgKilcbmxldCAoKSA9IHByaW50X2VuZGxpbmUganNvbl9zdHJpbmcgKilcblxuKCogbGV0IHN0b3JlX3Jlc3VsdHMgPSBcbiAgbGV0IG1vZHVsZSBKID0gWW9qc29uLkJhc2ljIGluXG4gIGxldCBtb2R1bGUgSlUgPSBZb2pzb24uQmFzaWMuVXRpbCBpblxuICBsZXQganNvbiA9IFxuICAgIG1hdGNoIE9DYW5yZW4uU3RyZWFtLnRha2Ugfm46MSByciB3aXRoXG4gICAgfCBbXSAtPiBKLm51bGxcbiAgICB8IF86Ol8gLT4gXG4gICAgICBsZXQgYW5zID0gcnIjcmVpZnkgc3RvcmFnZV9yZWlmaWVyIGluXG4gICAgICBsZXQgc3RvcmFnZV9qc29uID0gYW5zIHw+IHNob3dfc3RvcmFnZSB8PiBKLmZyb21fc3RyaW5nIGluXG4gICAgICBKLihgQXNzb2MgW1wic3RvcmFnZVwiLCBzdG9yYWdlX2pzb25dKVxuICBpblxuICBsZXQgZmlsZSA9IG9wZW5fb3V0IFwicmVzdWx0cy5qc29uXCIgaW5cbiAgbGV0IF8gPSBZb2pzb24uQmFzaWMucHJldHR5X3RvX2NoYW5uZWwgZmlsZSBqc29uIGluXG4gIGNsb3NlX291dCBmaWxlXG5pbiAqKVxuW0BAQG9jYW1sLndhcm5lcnJvciBcIi0yN1wiXVxuXG4oKiBsZXQgc2NoZWRvIF9jb25zdHJhaW50cyBzY2hlZHVsZSBsZWN0dXJlX3BsYW4gPVxuICBPQ2FucmVuLnJ1blxuICAgIE9DYW5yZW4ucVxuICAgIChmdW4geCAtPiB0ZXN0MSBfY29uc3RyYWludHMgc2NoZWR1bGUgbGVjdHVyZV9wbGFuIHgpXG4gICAgKGZ1biByciAtPiByciNyZWlmeSBzdG9yYWdlX3JlaWZpZXIpXG4gIHw+IE9DYW5yZW4uU3RyZWFtLnRha2Ugfm46MVxuICB8PiBTdGRsaWIuTGlzdC5pdGVyaSAoZnVuIGkgYW5zIC0+XG4gICAgICAgbGV0IGpzb25fb2JqID0gWW9qc29uLkJhc2ljLmZyb21fc3RyaW5nIChzaG93X3N0b3JhZ2UgYW5zKSBpblxuICAgICAgIGxldCBmaWxlX25hbWUgPSBcIm91dHB1dC5qc29uXCIgaW5cbiAgICAgICAoKiBTZXQgeW91ciBkZXNpcmVkIGZpbGUgbmFtZSBhbmQgcGF0aCAqKVxuICAgICAgIFlvanNvbi5CYXNpYy50b19maWxlIGZpbGVfbmFtZSBqc29uX29iailcbjs7XG5cbmxldCBfID0gc2NoZWRvIFtdIFsgWyBcImItMDdcIjsgXCJ2aWRlblwiOyBcIm1hdGFuXCIgXSBdIFtdICopXG4oKiBcbmxldCBzY2hlZG9fdG9fanNvbiBjb25zdHJhaW50cyBzY2hlZHVsZSBsZWN0dXJlX3BsYW4gPVxuICBPQ2FucmVuLnJ1blxuICAgIE9DYW5yZW4ucVxuICAgIChmdW4geCAtPiBTY2hlZF9jb3JlLnRlc3QxIGNvbnN0cmFpbnRzIHNjaGVkdWxlIGxlY3R1cmVfcGxhbiB4KVxuICAgIChmdW4gcnIgLT4gcnIjcmVpZnkgc3RvcmFnZV9yZWlmaWVyKVxuICB8PiBPQ2FucmVuLlN0cmVhbS50YWtlIH5uOjFcbiAgfD4gTGlzdC5tYXAgc2hvd19zdG9yYWdlXG4gIHw+IExpc3QubWFwIFlvanNvbi5TYWZlLmZyb21fc3RyaW5nXG4gIHw+IGBMaXN0XG4gIHw+IFlvanNvbi5TYWZlLnRvX2ZpbGUgXCJvdXRwdXQuanNvblwiXG47OyAqKVxuXG4oKiBcblxubGV0IHNjaGVkb190b19qc29uIGNvbnN0cmFpbnRzIHNjaGVkdWxlIGxlY3R1cmVfcGxhbiA9XG4gIE9DYW5yZW4ucnVuXG4gICAgT0NhbnJlbi5xXG4gICAgKGZ1biB4IC0+IFNjaGVkX2NvcmUudGVzdDEgY29uc3RyYWludHMgc2NoZWR1bGUgbGVjdHVyZV9wbGFuIHgpXG4gICAgKGZ1biByciAtPiByciNyZWlmeSBzdG9yYWdlX3JlaWZpZXIpXG4gIHw+IE9DYW5yZW4uU3RyZWFtLnRha2Ugfm46MVxuICB8PiBMaXN0Lm1hcCBzaG93X3N0b3JhZ2VcbiAgfD4gTGlzdC5tYXAgWW9qc29uLlNhZmUuZnJvbV9zdHJpbmdcbiAgfD4gYExpc3RcbiAgfD4gWW9qc29uLlNhZmUudG9fZmlsZSBcIm91dHB1dC5qc29uXCJcbigqIENvbnZlcnQgdGhlIGRhdGEgdG8gSlNPTiAqKVxubGV0IGNvbnZlcnRfdG9fanNvbiBkYXRhID1cbiAgbGV0IHJlYyBjb252ZXJ0X2xpc3QgbHN0ID0gYExpc3QgKExpc3QubWFwIGNvbnZlcnRfaXRlbSBsc3QpXG4gIGFuZCBjb252ZXJ0X2l0ZW0gaXRlbSA9XG4gICAgbWF0Y2ggaXRlbSB3aXRoXG4gICAgfCBrZXksIHZhbHVlcyAtPiBgQXNzb2MgWyBrZXksIGNvbnZlcnRfbGlzdCB2YWx1ZXMgXVxuICAgIHwgXyAtPiBgTnVsbFxuICBpblxuICBtYXRjaCBkYXRhIHdpdGhcbiAgfCBudW0sIHBhaXJzIC0+IGBBc3NvYyBbIHN0cmluZ19vZl9pbnQgbnVtLCBjb252ZXJ0X2xpc3QgcGFpcnMgXVxuOztcblxuKCogRGF0YSB0byBjb252ZXJ0ICopXG5sZXQgZGF0YSA9XG4gICggMFxuICAsIFsgKCBcImItMTFcIlxuICAgICAgLCBbIFsgXCJnZW9tMVwiOyBcImdlb20yXCI7IDAuNDc1OyAwLjQ3NiBdXG4gICAgICAgIDsgWyAwLjMzODsgMC4zMzk7IDAuMzQwOyAwLjM0MSBdXG4gICAgICAgIDsgWyAwLjM0NjsgMC4zNDc7IDAuMzQ4OyAwLjM0OSBdXG4gICAgICAgIDsgWyAwLjM1MDsgMC4zNTE7IDAuMzUyOyAwLjM1MyBdXG4gICAgICAgIDsgWyAwLjM2MjsgMC4zNjM7IDAuMzY0OyAwLjM2NSBdXG4gICAgICAgIF0gKVxuICAgIDsgKCBcInZpZGVuMVwiXG4gICAgICAsIFsgWyBcImdlb20xXCI7IFwiZ2VvbTJcIjsgMC40Nzg7IDAuNDc5IF1cbiAgICAgICAgOyBbIDAuMjcyOyAwLjI3MzsgMC4yNzQ7IDAuMjc1IF1cbiAgICAgICAgOyBbIDAuMjg4OyAwLjI4OTsgMC4yOTA7IDAuMjkxIF1cbiAgICAgICAgOyBbIDAuMjkyOyAwLjI5MzsgMC4yOTQ7IDAuMjk1IF1cbiAgICAgICAgOyBbIDAuMzAwOyAwLjMwMTsgMC4zMDI7IDAuMzAzIF1cbiAgICAgICAgXSApXG4gICAgXSApXG47O1xuXG4oKiBDb252ZXJ0IGRhdGEgdG8gSlNPTiAqKVxubGV0IGpzb24gPSBjb252ZXJ0X3RvX2pzb24gZGF0YVxuXG4oKiBDb252ZXJ0IEpTT04gdG8gc3RyaW5nICopXG5sZXQganNvbl9zdHJpbmcgPSB0b19zdHJpbmcganNvblxuXG4oKiBQcmludCB0aGUgSlNPTiBzdHJpbmcgKilcbmxldCAoKSA9IHByaW50X2VuZGxpbmUganNvbl9zdHJpbmcgKilcbigqIGxldCBjb252ZXJ0X3RvX2pzb24gZGF0YSA9XG4gIGxldCByZWMgY29udmVydF9saXN0IGxzdCA9IGBMaXN0IChMaXN0Lm1hcCBjb252ZXJ0X2l0ZW0gbHN0KVxuICBhbmQgY29udmVydF9pdGVtIGl0ZW0gPVxuICAgIG1hdGNoIGl0ZW0gd2l0aFxuICAgIHwga2V5LCB2YWx1ZXMgLT4gYEFzc29jIFsga2V5LCBjb252ZXJ0X2xpc3QgdmFsdWVzIF1cbiAgICB8IF8gLT4gYE51bGxcbiAgaW5cbiAgbWF0Y2ggZGF0YSB3aXRoXG4gIHwgbnVtLCBwYWlycyAtPiBgQXNzb2MgWyBzdHJpbmdfb2ZfaW50IG51bSwgY29udmVydF9saXN0IHBhaXJzIF1cbjs7ICopXG4oKiBsZXQgc2NoZWRvIF9jb25zdHJhaW50cyBzY2hlZHVsZSBsZWN0dXJlX3BsYW4gPVxuICBPQ2FucmVuLnJ1blxuICAgIE9DYW5yZW4ucVxuICAgIChmdW4geCAtPiB0ZXN0MSBfY29uc3RyYWludHMgc2NoZWR1bGUgbGVjdHVyZV9wbGFuIHgpXG4gICAgKGZ1biByciAtPiByciNyZWlmeSBzdG9yYWdlX3JlaWZpZXIpXG4gIHw+IE9DYW5yZW4uU3RyZWFtLnRha2Ugfm46MVxuICB8PiBTdGRsaWIuTGlzdC5pdGVyaSAoZnVuIGkgZGF0YSAtPiBGb3JtYXQucHJpbnRmIFwiJWQ6ICVzXFxuJSFcIiBpIChcbiAgXG4gICgqIERhdGEgdG8gY29udmVydCAqKVxuXG4gIFxuICAoKiBDb252ZXJ0IGRhdGEgdG8gSlNPTiAqKVxuICBsZXQganNvbiA9IGNvbnZlcnRfdG9fanNvbiBkYXRhXG4gIFxuICAoKiBDb252ZXJ0IEpTT04gdG8gc3RyaW5nICopXG4gIGxldCBqc29uX3N0cmluZyA9IHRvX3N0cmluZyBqc29uXG4gIFxuICAoKiBQcmludCB0aGUgSlNPTiBzdHJpbmcgKilcbiAgbGV0ICgpID0gcHJpbnRfZW5kbGluZSBqc29uX3N0cmluZykpXG47OyAqKVxuXG5vcGVuIEFycmF5XG5cbmxldCBfID1cbiAgSnMuZXhwb3J0XG4gICAgXCJteU1hdGhMaWJcIlxuICAgIChvYmplY3QlanNcbiAgICAgICBtZXRob2QgZ2VuZXJhdGVTY2hlZFxuICAgICAgICAgY29uc3RyYWludHNcbiAgICAgICAgIChzY2hlZHVsZSA6IEpzLmpzX3N0cmluZyBKcy50IEpzLmpzX2FycmF5IEpzLnQgSnMuanNfYXJyYXkgSnMudClcbiAgICAgICAgIGxlY3R1cmVfcGxhblxuICAgICAgICAgbnVtYmVyID1cbiAgICAgICAgIHNjaGVkb1xuICAgICAgICAgICAodG9fbGlzdFxuICAgICAgICAgICAgICAobWFwXG4gICAgICAgICAgICAgICAgIHRvX2xpc3RcbiAgICAgICAgICAgICAgICAgKGNvbnN0cmFpbnRzXG4gICAgICAgICAgICAgICAgIHw+IEpzLnRvX2FycmF5XG4gICAgICAgICAgICAgICAgIHw+IEFycmF5Lm1hcCBKcy50b19hcnJheVxuICAgICAgICAgICAgICAgICB8PiBBcnJheS5tYXAgKEFycmF5Lm1hcCBKcy50b19zdHJpbmcpKSkpXG4gICAgICAgICAgICh0b19saXN0XG4gICAgICAgICAgICAgIChtYXBcbiAgICAgICAgICAgICAgICAgdG9fbGlzdFxuICAgICAgICAgICAgICAgICAoc2NoZWR1bGVcbiAgICAgICAgICAgICAgICAgfD4gSnMudG9fYXJyYXlcbiAgICAgICAgICAgICAgICAgfD4gQXJyYXkubWFwIEpzLnRvX2FycmF5XG4gICAgICAgICAgICAgICAgIHw+IEFycmF5Lm1hcCAoQXJyYXkubWFwIEpzLnRvX3N0cmluZykpKSlcbiAgICAgICAgICAgKHRvX2xpc3RcbiAgICAgICAgICAgICAgKG1hcFxuICAgICAgICAgICAgICAgICB0b19saXN0XG4gICAgICAgICAgICAgICAgIChsZWN0dXJlX3BsYW5cbiAgICAgICAgICAgICAgICAgfD4gSnMudG9fYXJyYXlcbiAgICAgICAgICAgICAgICAgfD4gQXJyYXkubWFwIEpzLnRvX2FycmF5XG4gICAgICAgICAgICAgICAgIHw+IEFycmF5Lm1hcCAoQXJyYXkubWFwIEpzLnRvX3N0cmluZykpKSlcbiAgICAgICAgICAgbnVtYmVyXG5cbiAgICAgICB2YWwgemVybyA9IDAuXG4gICAgICAgbWV0aG9kIHNoaXQgKCkgPSBKcy5hcnJheSBbfCAxOyAyOyAzIHxdXG4gICAgZW5kKVxuOztcbiJdfQ==
