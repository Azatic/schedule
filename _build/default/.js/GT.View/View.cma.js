// Generated by js_of_ocaml
//# buildInfo:effects=false, use-js-string=false, version=5.0.1
(function
   (globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_string_compare=runtime.caml_string_compare,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    var
     global_data=runtime.caml_get_global_data(),
     cst$16=caml_string_of_jsbytes("()"),
     cst$15=caml_string_of_jsbytes(""),
     cst$14=caml_string_of_jsbytes(""),
     cst$13=caml_string_of_jsbytes(""),
     cst$10=caml_string_of_jsbytes(""),
     cst$8=caml_string_of_jsbytes("}"),
     cst$9=caml_string_of_jsbytes("{"),
     cst$6=caml_string_of_jsbytes("]"),
     cst$7=caml_string_of_jsbytes("["),
     cst$4=caml_string_of_jsbytes(")"),
     cst$5=caml_string_of_jsbytes("("),
     cst=caml_string_of_jsbytes("()"),
     cst$0=caml_string_of_jsbytes("; "),
     cst$1=caml_string_of_jsbytes(", "),
     cst$2=caml_string_of_jsbytes(" "),
     cst$3=caml_string_of_jsbytes("\n"),
     cst$11=caml_string_of_jsbytes(", "),
     cst$12=caml_string_of_jsbytes("; "),
     first=caml_string_of_jsbytes(""),
     second=caml_string_of_jsbytes(""),
     Stdlib_List=global_data.Stdlib__List,
     Stdlib_Printf=global_data.Stdlib__Printf,
     Stdlib_Array=global_data.Stdlib__Array,
     Stdlib=global_data.Stdlib,
     Stdlib_Buffer=global_data.Stdlib__Buffer,
     Stdlib_String=global_data.Stdlib__String,
     Stdlib_Printexc=global_data.Stdlib__Printexc,
     Stdlib_Int32=global_data.Stdlib__Int32,
     Stdlib_Int64=global_data.Stdlib__Int64,
     Stdlib_Nativeint=global_data.Stdlib__Nativeint,
     _e_=[0,[2,0,[12,61,[2,0,0]]],caml_string_of_jsbytes("%s=%s")],
     _f_=
      [0,
       [12,40,[2,0,[11,caml_string_of_jsbytes(", "),[2,0,[12,41,0]]]]],
       caml_string_of_jsbytes("(%s, %s)")],
     _a_=[0,[0,0],caml_string_of_jsbytes("%c")];
    function toString(v)
     {var b=caml_call1(Stdlib_Buffer[1],1024);
      caml_call1(v,b);
      return caml_call1(Stdlib_Buffer[2],b)}
    function empty(b){return 0}
    function concat(x,y,b){caml_call1(x,b);return caml_call1(y,b)}
    function string(x,b){return caml_call2(Stdlib_Buffer[16],b,x)}
    function unit(param){return function(_az_){return string(cst,_az_)}}
    function int$0(x)
     {var _ax_=caml_call1(Stdlib[33],x);
      return function(_ay_){return string(_ax_,_ay_)}}
    function float$0(x)
     {var _av_=caml_call1(Stdlib[35],x);
      return function(_aw_){return string(_av_,_aw_)}}
    function bool(x)
     {var _at_=caml_call1(Stdlib[30],x);
      return function(_au_){return string(_at_,_au_)}}
    function char$0(x)
     {var _ar_=caml_call2(Stdlib_Printf[4],_a_,x);
      return function(_as_){return string(_ar_,_as_)}}
    function semicolon(_aq_){return string(cst$0,_aq_)}
    function comma(_ap_){return string(cst$1,_ap_)}
    function space(_ao_){return string(cst$2,_ao_)}
    function break$0(_an_){return string(cst$3,_an_)}
    function seq(v,b)
     {function _am_(x){return caml_call1(x,b)}
      return caml_call2(Stdlib_List[17],_am_,v)}
    function seqa(v,b)
     {function _al_(x){return caml_call1(x,b)}
      return caml_call2(Stdlib_Array[13],_al_,v)}
    function listBy(d,v,b)
     {if(v)var tl=v[2],tl$0=tl;else var tl$0=0;
      function _ak_(l,x)
       {caml_call1(x,b);if(! l)return 0;var tl=l[2];caml_call1(d,b);return tl}
      caml_call3(Stdlib_List[25],_ak_,tl$0,v);
      return 0}
    function list(_ai_,_aj_){return listBy(comma,_ai_,_aj_)}
    function arrayBy(d,v,b)
     {var n=v.length - 1;
      function _ag_(i,x)
       {caml_call1(x,b);
        var _ah_=i < (n - 1 | 0)?1:0;
        return _ah_?caml_call1(d,b):_ah_}
      return caml_call2(Stdlib_Array[14],_ag_,v)}
    function array(_ae_,_af_){return arrayBy(comma,_ae_,_af_)}
    function inbr(l,r,b)
     {var _ac_=[0,l,[0,b,[0,r,0]]];
      return function(_ad_){return seq(_ac_,_ad_)}}
    function inrbr(b)
     {function _$_(_ab_){return string(cst$4,_ab_)}
      return inbr(function(_aa_){return string(cst$5,_aa_)},_$_,b)}
    function insqbr(b)
     {function _Y_(___){return string(cst$6,___)}
      return inbr(function(_Z_){return string(cst$7,_Z_)},_Y_,b)}
    function incvbr(b)
     {function _V_(_X_){return string(cst$8,_X_)}
      return inbr(function(_W_){return string(cst$9,_W_)},_V_,b)}
    function concatWithDelimiter(delimiter,acc,x)
     {if(! caml_string_notequal(acc,cst$10))return x;
      var _U_=caml_call2(Stdlib[28],delimiter,x);
      return caml_call2(Stdlib[28],acc,_U_)}
    function concatWithComma(_S_,_T_)
     {return concatWithDelimiter(cst$11,_S_,_T_)}
    function concatWithSemicolon(_Q_,_R_)
     {return concatWithDelimiter(cst$12,_Q_,_R_)}
    function ListC(_N_,_M_)
     {function _O_(acc,x)
       {var _P_=caml_call1(_M_[1],x);return caml_call2(_N_[1],acc,_P_)}
      var toString=caml_call2(Stdlib_List[25],_O_,cst$13);
      return [0,toString]}
    var _b_=[0,concatWithComma];
    function List(_L_){return ListC(_b_,_L_)}
    function ArrayC(_I_,_H_)
     {function _J_(acc,x)
       {var _K_=caml_call1(_H_[1],x);return caml_call2(_I_[1],acc,_K_)}
      var toString=caml_call2(Stdlib_Array[17],_J_,cst$14);
      return [0,toString]}
    var _c_=[0,concatWithComma];
    function Array(_G_){return ArrayC(_c_,_G_)}
    function SetC(C,S,V)
     {function toString(x)
       {var X=ListC(C,V),_F_=caml_call1(S[23],x);return caml_call1(X[1],_F_)}
      return [0,toString]}
    var _d_=[0,concatWithComma];
    function Set(_D_,_E_){return SetC(_d_,_D_,_E_)}
    function NamedPair(N,F,S)
     {function toString(param)
       {var y=param[2],x=param[1];
        function field(value,name)
         {return caml_string_notequal(name,cst$15)
                  ?caml_call3(Stdlib_Printf[4],_e_,name,value)
                  :value}
        var
         _z_=N[2],
         _A_=field(caml_call1(S[1],y),_z_),
         _B_=N[1],
         _C_=field(caml_call1(F[1],x),_B_);
        return caml_call3(Stdlib_Printf[4],_f_,_C_,_A_)}
      return [0,toString]}
    var _g_=[0,first,second];
    function Pair(_x_,_y_){return NamedPair(_g_,_x_,_y_)}
    var toString$0=caml_call1(Stdlib_String[1],1),Char=[0,toString$0];
    function toString$1(x){return x}
    var String=[0,toString$1];
    function MapC(C,M,K,V)
     {function toString(x)
       {var P=Pair(K,V),X=ListC(C,String),_t_=0;
        function _u_(x,y,acc){return [0,caml_call1(P[1],[0,x,y]),acc]}
        var
         _v_=caml_call3(M[13],_u_,x,_t_),
         _w_=caml_call2(Stdlib_List[56],caml_string_compare,_v_);
        return caml_call1(X[1],_w_)}
      return [0,toString]}
    var _h_=[0,concatWithComma];
    function Map(_q_,_r_,_s_){return MapC(_h_,_q_,_r_,_s_)}
    function HashtblC(C,M,K,V)
     {function toString(x)
       {var P=Pair(K,V),X=ListC(C,String),_m_=0;
        function _n_(x,y,acc){return [0,caml_call1(P[1],[0,x,y]),acc]}
        var
         _o_=caml_call3(M[14],_n_,x,_m_),
         _p_=caml_call2(Stdlib_List[56],caml_string_compare,_o_);
        return caml_call1(X[1],_p_)}
      return [0,toString]}
    var _i_=[0,concatWithComma];
    function Hashtbl(_j_,_k_,_l_){return HashtblC(_i_,_j_,_k_,_l_)}
    var
     toString$2=Stdlib[33],
     Integer=[0,toString$2],
     toString$3=Stdlib[35],
     Float=[0,toString$3],
     toString$4=Stdlib[30],
     Bool=[0,toString$4],
     toString$5=Stdlib_Printexc[1],
     Exn=[0,toString$5];
    function toString$6(param){return cst$16}
    var
     Unit=[0,toString$6],
     toString$7=Stdlib_Int32[14],
     Int32=[0,toString$7],
     toString$8=Stdlib_Int64[14],
     Int64=[0,toString$8],
     toString$9=Stdlib_Nativeint[15],
     Nativeint=[0,toString$9],
     View=
      [0,
       toString,
       empty,
       concat,
       unit,
       string,
       int$0,
       float$0,
       bool,
       char$0,
       semicolon,
       comma,
       space,
       break$0,
       seq,
       seqa,
       listBy,
       list,
       arrayBy,
       array,
       inbr,
       inrbr,
       insqbr,
       incvbr,
       ListC,
       ArrayC,
       SetC,
       MapC,
       HashtblC,
       List,
       Array,
       Set,
       Map,
       Hashtbl,
       NamedPair,
       Pair,
       String,
       Integer,
       Float,
       Bool,
       Char,
       Unit,
       Exn,
       Int32,
       Int64,
       Nativeint,
       concatWithDelimiter,
       concatWithComma,
       concatWithSemicolon];
    runtime.caml_register_global(33,View,"View");
    return}
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
